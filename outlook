Question 1 and 2 
def encrypt(plain_text, key): 
    cipher_text = ""
    for char in plain_text:
        if char.isalpha():
            if char.islower():
                cipher_char = chr((ord(char) - ord('a') + key) % 26 + ord('a'))
            else:
                cipher_char = chr((ord(char) - ord('A') + key) % 26 + ord('A'))
        elif char == ' ':
            cipher_char = '#'
        else:
            cipher_char = char
        cipher_text += cipher_char
    return cipher_text

def decrypt(cipher_text, key):
    plain_text = ""
    for char in cipher_text:
        if char.isalpha():
            if char.islower():
                plain_char = chr((ord(char) - ord('a') - key) % 26 + ord('a'))
            else:
                plain_char = chr((ord(char) - ord('A') - key) % 26 + ord('A'))
        elif char == '#':
            plain_char = ' '
        else:
            plain_char = char
        plain_text += plain_char
    return plain_text

def calculate_letter_frequency(text):
    letter_count = {}
    total_count = 0
    for char in text:
        if char.isalpha():
            letter_count[char] = letter_count.get(char, 0) + 1
            total_count += 1

    frequency_percentage = {}
    for letter, count in letter_count.items():
        percentage = (count / total_count) * 100
        frequency_percentage[letter] = round(percentage, 2)
    return frequency_percentage

plain_text = input("Enter the plain text: ")
key = int(input("Enter the key for encryption/decryption: "))

encrypted_text = encrypt(plain_text, key)
decrypted_text = decrypt(encrypted_text, key)

print("Encrypted Text:", encrypted_text)
print("Decrypted Text:", decrypted_text)
frequency_analysis = calculate_letter_frequency(decrypted_text)
print("Frequency Analysis:")

for letter, percentage in frequency_analysis.items():
    print("{}: {}%".format(letter, percentage))

Question 3
Only transposition cipher 
import numpy as np 

def encrypt(plain_text, key):
    block_size = len(key)
    while len(plain_text) % block_size != 0:
        plain_text += '*'  # Padding with '*' to make the length a multiple of block_size
    num_blocks = len(plain_text) // block_size
    cipher_matrix = []
    for i in range(num_blocks):
        block = plain_text[i * block_size:(i + 1) * block_size]
        cipher_block = [block[key[j]] for j in range(block_size)]
        cipher_matrix.append(cipher_block)
    return np.array(cipher_matrix)

def decrypt(cipher_matrix, key):
    block_size = len(key)
    num_blocks = len(cipher_matrix)
    plain_text = ""
    for i in range(num_blocks):
        cipher_block = cipher_matrix[i]
        plain_block = [''] * block_size
        # Reverse the key to get the inverse permutation
        inverse_key = [key.index(j) for j in range(block_size)]
        for j in range(block_size):
            plain_block[inverse_key[j]] = cipher_block[j]
        plain_text += ''.join(plain_block)
    return plain_text

def get_key():
    while True:
        try:
            key = input("Enter the transposition key (e.g., '3124'): ")
            key = [int(k) for k in key]
            # Check if the key is a valid permutation
            if sorted(key) == list(range(len(key))):
                return key
            else:
                print("Invalid key. Please enter a valid permutation.")
        except ValueError:
            print("Invalid input. Please enter a sequence of digits.")

plain_text = input("Enter the plain text: ")
key = get_key()
encrypted_matrix = encrypt(plain_text, key)
print("Encrypted Matrix:")
print(encrypted_matrix)

# Transpose the encrypted matrix to decrypt column-wise
decrypted_matrix = np.transpose(encrypted_matrix)
# Concatenate the columns to get the final decrypted text
decrypted_text = ''.join(decrypted_matrix.flatten())
print("Decrypted Text:", decrypted_text)

transposition product cipher 
import numpy as np 

def encrypt1(plain_text, key):
    cipher_text = ""
    for char in plain_text:
        if char.isalpha():
            if char.islower():
                cipher_char = chr((ord(char) - ord('a') + key) % 26 + ord('a'))
            else:
                cipher_char = chr((ord(char) - ord('A') + key) % 26 + ord('A'))
        elif char == ' ':
            cipher_char = '#'
        else:
            cipher_char = char
        cipher_text += cipher_char
    return cipher_text

def encrypt(plain_text, key):
    block_size = len(key)
    while len(plain_text) % block_size != 0:
        plain_text += '*'  # Padding with '*' to make the length a multiple of block_size
    num_blocks = len(plain_text) // block_size
    cipher_matrix = []
    for i in range(num_blocks):
        block = plain_text[i * block_size:(i + 1) * block_size]
        cipher_block = [block[key[j]] for j in range(block_size)]
        cipher_matrix.append(cipher_block)
    return np.array(cipher_matrix)

def decrypt(cipher_matrix, key):
    block_size = len(key)
    num_blocks = len(cipher_matrix)
    plain_text = ""
    for i in range(num_blocks):
        cipher_block = cipher_matrix[i]
        plain_block = [''] * block_size
        # Reverse the key to get the inverse permutation
        inverse_key = [key.index(j) for j in range(block_size)]
        for j in range(block_size):
            plain_block[inverse_key[j]] = cipher_block[j]
        plain_text += ''.join(plain_block)
    return plain_text

def get_key():
    while True:
        try:
            key = input("Enter the transposition key (e.g., '3124'): ")
            key = [int(k) for k in key]
            # Check if the key is a valid permutation
            if sorted(key) == list(range(len(key))):
                return key
            else:
                print("Invalid key. Please enter a valid permutation.")
        except ValueError:
            print("Invalid input. Please enter a sequence of digits.")

plain_text = input("Enter the plain text: ")
key = int(input("Enter the key for encryption/decryption: "))
encrypted_text = encrypt1(plain_text, key)
print("Encrypted Text: ", encrypted_text)

key = get_key()
encrypted_matrix = encrypt(encrypted_text, key)
decrypted_text = decrypt(encrypted_matrix, key)
print("Encrypted Matrix:")
print(encrypted_matrix)

# Transpose the encrypted matrix to decrypt column-wise
decrypted_matrix = np.transpose(encrypted_matrix)
# Concatenate the columns to get the final decrypted text
decrypted_text = ''.join(decrypted_matrix.flatten())
print("Decrypted Text:", decrypted_text)
print("Original Text:", plain_text)

Question 4
def vigenere_encrypt(plain_text, key): 
    plain_text = plain_text.replace(" ", "")
    encrypted_text = ""
    key_length = len(key)
    
    for i, char in enumerate(plain_text):
        if char.isalpha():
            key_char = key[i % key_length]
            key_shift = ord(key_char.upper()) - ord('A')
            
            if char.islower():
                encrypted_char = chr((ord(char) - ord('a' if char.islower() else 'A') + key_shift) % 26 + ord('a'))
            else:
                encrypted_char = chr((ord(char) - ord('a' if char.islower() else 'A') + key_shift) % 26 + ord('A'))
            encrypted_text += encrypted_char
        else:
            encrypted_text += char
    return encrypted_text

def vigenere_decrypt(encrypted_text, key):
    decrypted_text = ""
    key_length = len(key)
    
    for i, char in enumerate(encrypted_text):
        if char.isalpha():
            key_char = key[i % key_length]
            key_shift = ord(key_char.upper()) - ord('A')
            
            if char.islower():
                decrypted_char = chr((ord(char) - ord('a' if char.islower() else 'A') - key_shift) % 26 + ord('a'))
            else:
                decrypted_char = chr((ord(char) - ord('a' if char.islower() else 'A') - key_shift) % 26 + ord('A'))
            decrypted_text += decrypted_char
        else:
            decrypted_text += char
    return decrypted_text

plaintext = input("Enter the plaintext: ")
key = input("Enter the encryption key: ")
encrypted = vigenere_encrypt(plaintext, key)
print("Encrypted:", encrypted)
decrypted = vigenere_decrypt(encrypted, key)
print("Decrypted:", decrypted)

Question 5

1.	WHOIS:
WHOIS is a protocol and a command-line tool that allows you to retrieve information about domain names, IP addresses, and network administrators. You can use it to find details about domain registration, such as the registrar, registration date, and contact information.
To use WHOIS, open your terminal or command prompt and enter a command like this:
Copy code
whois example.com
Replace "example.com" with the domain name you want to look up. The WHOIS response will provide information about the domain, including the registrar's details.
dig (Domain Information Groper):
dig is a command-line tool for querying DNS (Domain Name System) servers. It can provide detailed information about a domain, including its IP addresses, name servers, and more.
To use dig, open your terminal or command prompt and enter a command like this:
Copy code
dig example.com
Replace "example.com" with the domain name you want to query. The results will include DNS-related information, such as IP addresses and name server details.
traceroute:
Traceroute is a tool that allows you to trace the route that packets take to reach a destination server. It helps you identify the network hops between your computer and the destination.
To use traceroute, open your terminal or command prompt and enter a command like this:
Copy code
traceroute example.com
Replace "example.com" with the domain you want to trace. Traceroute will display a list of network hops along with IP addresses, helping you understand the path data takes to reach the destination.
nslookup (Name Server Lookup):
nslookup is a command-line tool for querying DNS servers to retrieve information about domain names and IP addresses. It's useful for finding DNS-related information about a domain.
To use nslookup, open your terminal or command prompt and enter a command like this:
Copy code
nslookup example.com
Replace "example.com" with the domain you want to query. The results will provide details about the domain, including its IP addresses and associated DNS information.

Question 6

Wireshark is a widely-used packet sniffer and network protocol analyzer that allows you to capture, inspect, and analyze network traffic. You can study its performance in both promiscuous and non-promiscuous mode and explore how packets can be traced based on different filters. Here's how you can do that:
a. Observer Performance in Promiscuous and Non-Promiscuous Mode:
1.	Install Wireshark: First, you need to install Wireshark on your computer.
Start Wireshark: Launch Wireshark and select the network interface you want to capture traffic from.
Promiscuous Mode:
•	In promiscuous mode, Wireshark captures all network traffic on the selected network interface, regardless of the intended recipient. 
Simply select your network interface in the main Wireshark window and click the "Start" button to begin capturing traffic in promiscuous mode.
Non-Promiscuous Mode:
•	To capture traffic only for the local machine (non-promiscuous mode), you can set up a capture filter. 
Go to "Capture" > "Options," and in the "Capture Filter" field, set a filter that limits the capture to specific source or destination IP addresses, ports, or protocols.
For example, you can set a filter like host 192.168.0.2 to capture traffic to and from a specific IP address.
Analyze Traffic:
•	Observe the captured traffic in both promiscuous and non-promiscuous modes. 
You can analyze packet details, including source and destination IP addresses, ports, protocols, and more.
b. Trace Packets Based on Different Filters:
Wireshark provides powerful filtering capabilities to trace packets based on various criteria. You can apply filters to narrow down your analysis. Here's how to use filters:
1.	Display Filter:
•	In Wireshark's main window, there's a filter bar where you can enter display filters. 
For example, you can enter filters like: 
	ip.addr == 192.168.0.1 to show packets to or from a specific IP address. 
http to display only HTTP packets.
tcp.port == 80 to show packets on port 80 (HTTP).
2.	Capture Filter:
•	As mentioned earlier, you can set up capture filters to limit the captured packets. 
For example, you can set a capture filter like port 80 to capture only packets on port 80.
3.	Coloring Rules:
•	Wireshark allows you to set up custom coloring rules based on packet characteristics. Go to "View" > "Coloring Rules" to create custom filters that highlight packets meeting specific criteria.
Follow Streams:
•	You can right-click on a packet and select "Follow" to follow a TCP or UDP stream, which will display all packets related to that stream.
Complex Filters:
•	Wireshark supports complex display filters using logical operators (e.g., and, or, not). You can create sophisticated filters to pinpoint specific traffic patterns.
Question 7

To use Nmap (Network Mapper) to scan open ports, perform TCP port scans, and UDP port scans, follow these steps:
1.	Download and Install Nmap:
•	Visit the official Nmap website (https://nmap.org/download.html) and download the appropriate installer for your operating system (Windows, Linux, macOS, etc.). 
Follow the installation instructions for your specific OS.
2.	Perform a Basic Open Port Scan:
•	Open a command prompt or terminal window. 
Use Nmap to perform a basic open port scan on a target host. Replace target_host with the IP address or hostname of the target.
3.	Copy code
4.	nmap target_host
5.	This command will scan the most common 1,000 ports on the target and report which are open.
6.	Perform a TCP Port Scan:
•	To perform a more comprehensive TCP port scan, you can specify a range of ports or use other options. For example:
cssCopy code
nmap -p 1-65535 target_host
This command scans all TCP ports (1-65,535) on the target host.
Perform a UDP Port Scan:
•	To scan for open UDP ports, use the -sU option. UDP scans can be slower because UDP is connectionless. For example:
Copy code
nmap -sU target_host
Save Output to a File:
•	You can save the scan results to a file for further analysis. To save the results to a file, use the -oN option followed by the output filename.
cssCopy code
nmap -p 1-65535 target_host -oN scan_results.txt
Specify Scan Intensity:
•	Nmap offers different scan intensity levels. For example, you can use the -T option to specify the scan intensity. The levels include -T0 (paranoid) to -T5 (insane).
Copy code
nmap -T4 target_host
Perform OS Detection:
•	Use the -O option to perform OS detection during the scan. This attempts to identify the operating system of the target host.
mathematicaCopy code
nmap -O target_host
Perform Service Version Detection:
•	Use the -sV option to perform service version detection. Nmap will try to determine the version of the services running on open ports.
Copy code
nmap -sV target_host
More Advanced Options:
•	Nmap offers many advanced options and customization. You can explore options for scripting, timing, and more in the Nmap documentation and tutorials.

